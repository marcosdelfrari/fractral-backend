// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  nome      String
  role      String   @default("user") // "user" ou "admin"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  carts     Cart[]
  orders    Order[]
}

model PinVerification {
  id        Int      @id @default(autoincrement())
  email     String
  pin       String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Product {
  id        Int      @id @default(autoincrement())
  nome      String
  descricao String?
  preco     Float
  estoque   Int
  categoria String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  cartItems CartItem[]
  orderItems OrderItem[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  
  @@unique([userId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([cartId, productId])
}

model Order {
  id            Int      @id @default(autoincrement())
  userId        Int
  status        String   @default("pending") // pending, confirmed, shipped, delivered, cancelled
  totalAmount   Float
  shippingAddress String
  paymentMethod String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relacionamentos
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  unitPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
